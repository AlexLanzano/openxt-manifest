#! /bin/bash

# Usage: deploy_iso_legacy
# Run the required staging steps and generate the ISO image.
deploy_iso_legacy() {
    # TODO: This could be defined from configuration.
    local iso_name="openxt-installer.iso"
    local iso_path="${DEPLOY_DIR}/${iso_name}"

    # Prepare repository layout and write XC-{PACKAGE,REPOSITORY,SIGNATURE}
    # meta files.
    call_cmd "stage" "repository"
    # Prepare ISO image layout.
    # TODO: Amend syslinux files to reflect versions & such
    call_cmd "stage" "iso-old"

    genisoimage -o "${iso_path}" \
        -b "isolinux/isolinux.bin" -c "isolinux/boot.cat" \
        -no-emul-boot \
        -boot-load-size 4 \
        -boot-info-table \
        -r -J -l -V "OpenXT ${OPENXT_VERSION} installer." \
        "${STAGING_DIR}/iso" \
        "${STAGING_DIR}/repository"
    if [ $? -ne 0 ]; then
        echo "genisoimage failed."
        return 1
    fi

    ${STAGING_DIR}/iso/isolinux/isohybrid ${iso_path}
    if [ $? -ne 0 ]; then
        echo "isohybrid failed."
        return 1
    fi
}

# Usage: deploy_iso
# Run the required staging steps and generate the ISO image.
deploy_iso() {
    # TODO: This could be defined from configuration.
    local iso_name="openxt-installer.iso"
    local iso_path="${DEPLOY_DIR}/${iso_name}"
    local sys_sanity=0

    if ! command_sane "xorriso" "libisoburn"; then
        return 1
    fi

    # Prepare repository layout and write XC-{PACKAGE,REPOSITORY,SIGNATURE}
    # meta files.
    call_cmd "stage" "repository"
    # Prepare ISO image layout.
    # TODO: Amend syslinux files to reflect versions & such
    call_cmd "stage" "iso"

    xorriso -as mkisofs \
        -o "${iso_path}" \
        -isohybrid-mbr "${STAGING_DIR}/iso/isolinux/isohdpfx.bin" \
        -c "isolinux/boot.cat" \
        -b "isolinux/isolinux.bin" \
        -no-emul-boot \
        -boot-load-size 4 \
        -boot-info-table \
        -eltorito-alt-boot \
        -e "isolinux/efiboot.img" \
        -no-emul-boot \
        -isohybrid-gpt-basdat \
        -r \
        -J \
        -l \
        -V "OpenXT ${OPENXT_VERSION} installer." \
        -f \
        -quiet \
        "${STAGING_DIR}/iso" \
        "${STAGING_DIR}/repository"
}

# Usage: deploy_describe
# Display description for this command wrapper.
deploy_describe() {
    echo "Deploy OpenXT installer on an installation media."
}

deploy_dependecy() {
    echo "stage"
}

# Usage: deploy_usage
# Display usage for this command wrapper.
deploy_usage() {
    cat - <<EOF
Usage: deploy <command>
    Run a deploy command to populate DEPLOY_DIR with the given deployable based on STAGING_DIR content.
Deploy Commands:
    iso-old: Create a BIOS/MBR bootable ISO hybrid image of an OpenXT installer (can be dd'ed on a thumbdrive). This installeris available until OpenXT 7.
    iso: Create an EFI bootable ISO hybrid image of an OpenXT installer (can be dd'ed on a thumbdrive). This installer is available starting with OpenXT 8.
EOF
    exit $1
}

deploy_need_conf() { return 0; }

# Usage: deploy <command>
# Deploy OpenXT on the selected installation media.
deploy_main() {
    target="$1"
    shift 1

    case "${target}" in
        "iso-old") check_cmd_version "${target}"
                   deploy_iso_legacy $@ ;;
        "iso") check_cmd_version "${target}"
               deploy_iso $@ ;;
        "help") deploy_usage 0 ;;
        *) echo "Unknown staging command \`${target}'." >&2
           deploy_usage 1
           ;;
    esac
}
